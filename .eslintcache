[{"C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\index.tsx":"1","C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\App\\App.tsx":"2","C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\Header\\header.tsx":"3","C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\TaskField\\taskField.tsx":"4","C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\DragAndDropContainer\\DragAndDropContainer.tsx":"5","C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\WordCloud\\WordCloud.tsx":"6","C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\WordPasteField\\WordPasteField.tsx":"7","C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\Word\\Word.tsx":"8","C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\sentenceSet.ts":"9","C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\Button\\Button.tsx":"10","C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\itemTypes.ts":"11"},{"size":214,"mtime":1612254751563,"results":"12","hashOfConfig":"13"},{"size":869,"mtime":1612510525573,"results":"14","hashOfConfig":"13"},{"size":268,"mtime":1612324963249,"results":"15","hashOfConfig":"13"},{"size":630,"mtime":1612328756919,"results":"16","hashOfConfig":"13"},{"size":3006,"mtime":1612942814710,"results":"17","hashOfConfig":"13"},{"size":1057,"mtime":1612969357885,"results":"18","hashOfConfig":"13"},{"size":1197,"mtime":1612969357858,"results":"19","hashOfConfig":"13"},{"size":2462,"mtime":1613404209868,"results":"20","hashOfConfig":"13"},{"size":198,"mtime":1612361283081,"results":"21","hashOfConfig":"13"},{"size":290,"mtime":1612500779607,"results":"22","hashOfConfig":"13"},{"size":48,"mtime":1612765071903,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1njgftg",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\index.tsx",[],["51","52"],"C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\App\\App.tsx",[],"C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\Header\\header.tsx",[],"C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\TaskField\\taskField.tsx",[],"C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\DragAndDropContainer\\DragAndDropContainer.tsx",["53","54"],"import React, {useEffect, useState} from \"react\";\r\nimport styles from './styles.module.css'\r\nimport WordCloud from \"../WordCloud/WordCloud\";\r\nimport WordPasteField from \"../WordPasteField/WordPasteField\";\r\nimport sentenceSet from \"../../sentenceSet\";\r\nimport {useDrop} from \"react-dnd\";\r\nimport {ItemTypes} from \"../../itemTypes\";\r\n\r\nfunction getArrayOfWords(indexOfSentenceSet: number) {\r\n    const sentence = sentenceSet.get(Array.from(sentenceSet.keys())[indexOfSentenceSet]);\r\n    return sentence.replace(',', '')\r\n        .split(' ')\r\n        .map((text: string, index: number) =>\r\n            ({\r\n                text: text,\r\n                id: `word_${index}`,\r\n                dragFrom: `Cloud`,\r\n            })\r\n        );\r\n}\r\n\r\nfunction DragAndDropContainer() {\r\n\r\n    const initialWords = getArrayOfWords(0);\r\n    const [wordsInCloud, setWordsInCloud] = useState(initialWords);\r\n    const [wordsInPasteField, setWordsInPasteField] = useState([]);\r\n\r\n    const [dropProps, dropRef] = useDrop({\r\n        accept: ItemTypes.WORD,\r\n        drop: (item, monitor) => {\r\n            const itemID = monitor.getItem().id;\r\n            const wordIndex = initialWords.findIndex((word: { id: any; }) => word.id === itemID);\r\n            switch (monitor.getDropResult().dropZone) {\r\n                case 'Field': {\r\n                    const filteredPasteField = wordsInPasteField.filter((word: { id: any; }) => word.id !== itemID);\r\n                    const filteredCloud = wordsInCloud.filter((word: { id: any; }) => word.id !== itemID);\r\n\r\n                    // @ts-ignore\r\n                    setWordsInPasteField([...filteredPasteField, initialWords[wordIndex]]);\r\n                    setWordsInCloud(filteredCloud);\r\n                }\r\n                    break;\r\n                case \"Cloud\": {\r\n                    const filteredPasteField = wordsInPasteField.filter((word: { id: any; }) => word.id !== itemID);\r\n                    const filteredCloud = wordsInCloud.filter((word: { id: any; }) => word.id !== itemID);\r\n                    const newWordsInCloud = [...filteredCloud, initialWords[wordIndex]];\r\n\r\n                    const sortFunction = (a: { id: string; }, b: { id: string; }) => {\r\n                        const aIndex = initialWords.findIndex((word: { id: any; }) => word.id === a.id);\r\n                        const bIndex = initialWords.findIndex((word: { id: any; }) => word.id === b.id);\r\n                        return aIndex - bIndex\r\n                    };\r\n                    newWordsInCloud.sort(sortFunction);\r\n\r\n                    setWordsInPasteField(filteredPasteField);\r\n                    setWordsInCloud(newWordsInCloud);\r\n                }\r\n                    break;\r\n            }\r\n        }\r\n    });\r\n\r\n\r\n    return (\r\n        <div className={styles.dragAndDropContainer} ref={dropRef}>\r\n            <WordPasteField words={wordsInPasteField}/>\r\n            <WordCloud words={wordsInCloud}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DragAndDropContainer","C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\WordCloud\\WordCloud.tsx",["55","56"],"import React from \"react\";\r\nimport Word from \"../Word/Word\";\r\nimport styles from './styles.module.css'\r\nimport {useDrop} from \"react-dnd\";\r\nimport {ItemTypes} from \"../../itemTypes\";\r\n\r\n\r\ninterface WordCloudProps {\r\n    words: Array<any>,\r\n}\r\n\r\nfunction WordCloud(\r\n    {\r\n        words,\r\n    }: WordCloudProps\r\n) {\r\n    const [{canDrop, isOver}, drop] = useDrop({\r\n        accept: ItemTypes.WORD,\r\n        drop: (item, monitor) => {\r\n            return {\r\n                dropZone: 'Cloud'\r\n            }\r\n        },\r\n        collect: (monitor) => (\r\n            {\r\n                isOver: monitor.isOver(),\r\n                canDrop: monitor.canDrop(),\r\n            }\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div\r\n            id={'WordCloudZone'}\r\n            className={styles.wordCloud}\r\n            ref={drop}\r\n        >\r\n            {words.map((word: { text: string; id: string; dragFrom: string }, index) =>\r\n                <Word text={word.text} id={word.id} index={index}/>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WordCloud","C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\WordPasteField\\WordPasteField.tsx",["57","58"],"import React, {useState} from \"react\";\r\nimport styles from './styles.module.css'\r\n// @ts-ignore\r\nimport cn from \"classnames\"\r\nimport {useDrop} from 'react-dnd'\r\nimport {ItemTypes} from \"../../itemTypes\";\r\nimport Word from \"../Word/Word\";\r\n\r\n\r\ninterface WordPasteFieldProps {\r\n    words: Array<any>,\r\n}\r\n\r\nfunction WordPasteField(\r\n    {\r\n        words,\r\n    }: WordPasteFieldProps\r\n) {\r\n\r\n    const [{canDrop, isOver}, drop] = useDrop({\r\n        accept: ItemTypes.WORD,\r\n        drop: (item, monitor) => {\r\n            return {\r\n                dropZone: 'Field'\r\n            }\r\n        },\r\n        collect: (monitor) => {\r\n            return ({\r\n                isOver: monitor.isOver(),\r\n                canDrop: monitor.canDrop(),\r\n            })\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div\r\n            id={'WordDropZone'}\r\n            className={isOver ? cn(styles.dropZone, styles.dropZoneOver) : cn(styles.dropZone)}\r\n            ref={drop}\r\n        >\r\n            {words.map((word: { text: string; id: string; dragFrom: string }, index) =>\r\n                <Word text={word.text} id={word.id} index={index}/>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WordPasteField","C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\Word\\Word.tsx",["59"],"C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\sentenceSet.ts",["60"],"const sentenceSet = new Map;\r\n\r\nsentenceSet.set('Мy name is Alex','Съешь ещё этих мягких французских булок, да выпей чаю');\r\n\r\nexport default sentenceSet","C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\Button\\Button.tsx",[],"C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\itemTypes.ts",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":1,"column":16,"nodeType":"67","messageId":"68","endLine":1,"endColumn":25},{"ruleId":"65","severity":1,"message":"69","line":28,"column":12,"nodeType":"67","messageId":"68","endLine":28,"endColumn":21},{"ruleId":"65","severity":1,"message":"70","line":17,"column":13,"nodeType":"67","messageId":"68","endLine":17,"endColumn":20},{"ruleId":"65","severity":1,"message":"71","line":17,"column":22,"nodeType":"67","messageId":"68","endLine":17,"endColumn":28},{"ruleId":"65","severity":1,"message":"72","line":1,"column":16,"nodeType":"67","messageId":"68","endLine":1,"endColumn":24},{"ruleId":"65","severity":1,"message":"70","line":20,"column":13,"nodeType":"67","messageId":"68","endLine":20,"endColumn":20},{"ruleId":"73","severity":1,"message":"74","line":20,"column":10,"nodeType":"67","messageId":"75","endLine":20,"endColumn":14},{"ruleId":"76","severity":1,"message":"77","line":1,"column":21,"nodeType":"78","messageId":"79","endLine":1,"endColumn":28,"fix":"80"},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'dropProps' is assigned a value but never used.","'canDrop' is assigned a value but never used.","'isOver' is assigned a value but never used.","'useState' is defined but never used.","@typescript-eslint/no-redeclare","'Word' is already defined.","redeclared","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"83","text":"84"},"no-global-assign","no-unsafe-negation",[27,27],"()"]