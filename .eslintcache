[{"C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\index.tsx":"1","C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\App\\App.tsx":"2","C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\Header\\header.tsx":"3","C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\TaskField\\taskField.tsx":"4","C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\DragAndDropContainer\\DragAndDropContainer.tsx":"5","C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\WordCloud\\WordCloud.tsx":"6","C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\WordPasteField\\WordPasteField.tsx":"7","C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\Word\\Word.tsx":"8","C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\sentenceSet.ts":"9","C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\Button\\Button.tsx":"10","C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\itemTypes.ts":"11"},{"size":214,"mtime":1612254751563,"results":"12","hashOfConfig":"13"},{"size":869,"mtime":1612510525573,"results":"14","hashOfConfig":"13"},{"size":268,"mtime":1612324963249,"results":"15","hashOfConfig":"13"},{"size":630,"mtime":1612328756919,"results":"16","hashOfConfig":"13"},{"size":3092,"mtime":1613661759862,"results":"17","hashOfConfig":"13"},{"size":1700,"mtime":1613661738426,"results":"18","hashOfConfig":"13"},{"size":2179,"mtime":1613662227571,"results":"19","hashOfConfig":"13"},{"size":2509,"mtime":1613485496385,"results":"20","hashOfConfig":"13"},{"size":198,"mtime":1612361283081,"results":"21","hashOfConfig":"13"},{"size":290,"mtime":1612500779607,"results":"22","hashOfConfig":"13"},{"size":48,"mtime":1612765071903,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1njgftg",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"45","usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\index.tsx",[],["50","51"],"C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\App\\App.tsx",[],"C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\Header\\header.tsx",[],"C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\TaskField\\taskField.tsx",[],"C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\DragAndDropContainer\\DragAndDropContainer.tsx",["52","53","54","55","56","57","58","59"],"C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\WordCloud\\WordCloud.tsx",["60","61","62","63","64"],"import React, {useCallback, useState} from \"react\";\r\nimport update from 'immutability-helper';\r\nimport Word from \"../Word/Word\";\r\nimport styles from './styles.module.css'\r\nimport {useDrop} from \"react-dnd\";\r\nimport {ItemTypes} from \"../../itemTypes\";\r\n\r\n\r\ninterface WordCloudProps {\r\n    words: Array<any>,\r\n    setWordsInCloud: Function,\r\n}\r\n\r\nfunction WordCloud(\r\n    {\r\n        words,\r\n        setWordsInCloud\r\n    }: WordCloudProps\r\n) {\r\n\r\n    const [wordsInCloud, setWords] = useState(words);\r\n    const [{canDrop, isOver, didDrop, dropResult}, drop] = useDrop({\r\n        accept: ItemTypes.WORD,\r\n        drop: (item, monitor) => {\r\n            return {\r\n                dropZone: 'Cloud'\r\n            }\r\n        },\r\n        collect: (monitor) => (\r\n            {\r\n                isOver: monitor.isOver(),\r\n                canDrop: monitor.canDrop(),\r\n                didDrop: monitor.didDrop(),\r\n                dropResult: monitor.getDropResult()\r\n            }\r\n        )\r\n    });\r\n\r\n    const moveWord = useCallback((dragIndex: number, hoverIndex: number) => {\r\n        const dragWord = words[dragIndex];\r\n        setWords(\r\n            update(words, {\r\n                $splice: [\r\n                    [dragIndex, 1],\r\n                    [hoverIndex, 0, dragWord]\r\n                ]\r\n            })\r\n        );\r\n    }, [words]);\r\n\r\n    return (\r\n        <div\r\n            id={'WordCloudZone'}\r\n            className={styles.wordCloud}\r\n            ref={drop}\r\n        >\r\n            {wordsInCloud.map((word: { text: string; id: string; dragFrom: string }, index) =>\r\n                <Word text={word.text} id={word.id} index={index} moveWord={moveWord}/>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WordCloud\r\n\r\n\r\n","C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\WordPasteField\\WordPasteField.tsx",["65","66","67","68"],"C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\Word\\Word.tsx",["69"],"import React, {useRef} from \"react\";\r\nimport styles from './styles.module.css'\r\nimport {DropTargetMonitor, useDrag, useDrop} from 'react-dnd'\r\nimport {ItemTypes} from \"../../itemTypes\";\r\n\r\n\r\ninterface Word {\r\n    id: string\r\n    text: string\r\n    index: number\r\n    moveWord?: (dragIndex: number, hoverIndex: number) => void\r\n}\r\n\r\ninterface DragItem {\r\n    id: string\r\n    index: number\r\n    type: string\r\n}\r\n\r\nfunction Word({id, text, index, moveWord}: Word) {\r\n    const ref = useRef(null);\r\n    const [, drop] = useDrop({\r\n        accept: ItemTypes.WORD,\r\n        hover(item: DragItem, monitor: DropTargetMonitor) {\r\n            if (!ref.current) {\r\n                return;\r\n            }\r\n            const dragIndex = item.index;\r\n            const hoverIndex = index;\r\n\r\n            // Элемент не заменяет сам себя\r\n            if (dragIndex === hoverIndex) {\r\n                return\r\n            }\r\n\r\n            //размеры и положение накрываемого объекта\r\n            // @ts-ignore\r\n            const hoverWordRect = ref.current?.getBoundingClientRect();\r\n\r\n            // середина по оси Х\r\n            const hoverMiddleX = (hoverWordRect.right - hoverWordRect.left) / 2;\r\n\r\n            // позиция курсора\r\n            const cursorOffset = monitor.getClientOffset();\r\n\r\n            // расстояние от курсора до левого края\r\n            // @ts-ignore\r\n            const hoverCursorX = (cursorOffset.x - hoverWordRect.left);\r\n\r\n            //ничего не делаем если:\r\n            if (\r\n                (dragIndex < hoverIndex && hoverCursorX < hoverMiddleX) ||\r\n                (dragIndex > hoverIndex && hoverCursorX > hoverMiddleX)\r\n            ) {\r\n                return\r\n            }\r\n\r\n            //тут должна быть функция сдвига элемента\r\n            if (moveWord) {\r\n                moveWord(dragIndex, hoverIndex)\r\n            }\r\n        }\r\n    });\r\n\r\n    const [{isDragging}, drag] = useDrag({\r\n        item: {type: ItemTypes.WORD, id: id, index: index},\r\n        collect: (monitor) => ({\r\n            isDragging: monitor.isDragging(),\r\n        })\r\n    });\r\n\r\n    drag(drop(ref));\r\n    return (\r\n        <div\r\n            className={styles.word}\r\n            id={id}\r\n            ref={ref}\r\n            style={{opacity: isDragging ? 0.5 : 1}}\r\n        >\r\n            {text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Word","C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\sentenceSet.ts",["70"],"const sentenceSet = new Map;\r\n\r\nsentenceSet.set('Мy name is Alex','Съешь ещё этих мягких французских булок, да выпей чаю');\r\n\r\nexport default sentenceSet","C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\Conponents\\Button\\Button.tsx",[],"C:\\Users\\wbahas\\WebstormProjects\\testTask_iLink_dnd-translator\\src\\itemTypes.ts",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":1,"column":29,"nodeType":"77","messageId":"78","endLine":1,"endColumn":38},{"ruleId":"75","severity":1,"message":"79","line":29,"column":13,"nodeType":"77","messageId":"78","endLine":29,"endColumn":20},{"ruleId":"75","severity":1,"message":"80","line":29,"column":22,"nodeType":"77","messageId":"78","endLine":29,"endColumn":28},{"ruleId":"75","severity":1,"message":"81","line":29,"column":30,"nodeType":"77","messageId":"78","endLine":29,"endColumn":37},{"ruleId":"75","severity":1,"message":"82","line":29,"column":39,"nodeType":"77","messageId":"78","endLine":29,"endColumn":49},{"ruleId":"75","severity":1,"message":"83","line":29,"column":52,"nodeType":"77","messageId":"78","endLine":29,"endColumn":59},{"ruleId":"84","severity":1,"message":"85","line":44,"column":31,"nodeType":"86","messageId":"87","endLine":46,"endColumn":18},{"ruleId":"75","severity":1,"message":"88","line":62,"column":11,"nodeType":"77","messageId":"78","endLine":62,"endColumn":19},{"ruleId":"75","severity":1,"message":"79","line":22,"column":13,"nodeType":"77","messageId":"78","endLine":22,"endColumn":20},{"ruleId":"75","severity":1,"message":"80","line":22,"column":22,"nodeType":"77","messageId":"78","endLine":22,"endColumn":28},{"ruleId":"75","severity":1,"message":"81","line":22,"column":30,"nodeType":"77","messageId":"78","endLine":22,"endColumn":37},{"ruleId":"75","severity":1,"message":"82","line":22,"column":39,"nodeType":"77","messageId":"78","endLine":22,"endColumn":49},{"ruleId":"75","severity":1,"message":"89","line":51,"column":11,"nodeType":"77","messageId":"78","endLine":51,"endColumn":21},{"ruleId":"75","severity":1,"message":"79","line":23,"column":13,"nodeType":"77","messageId":"78","endLine":23,"endColumn":20},{"ruleId":"75","severity":1,"message":"81","line":23,"column":30,"nodeType":"77","messageId":"78","endLine":23,"endColumn":37},{"ruleId":"75","severity":1,"message":"82","line":23,"column":39,"nodeType":"77","messageId":"78","endLine":23,"endColumn":49},{"ruleId":"75","severity":1,"message":"88","line":52,"column":11,"nodeType":"77","messageId":"78","endLine":52,"endColumn":19},{"ruleId":"90","severity":1,"message":"91","line":20,"column":10,"nodeType":"77","messageId":"92","endLine":20,"endColumn":14},{"ruleId":"93","severity":1,"message":"94","line":1,"column":21,"nodeType":"95","messageId":"96","endLine":1,"endColumn":28,"fix":"97"},"no-native-reassign",["98"],"no-negated-in-lhs",["99"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'canDrop' is assigned a value but never used.","'isOver' is assigned a value but never used.","'didDrop' is assigned a value but never used.","'dropResult' is assigned a value but never used.","'dropRef' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'moveWord' is assigned a value but never used.","'deleteWord' is assigned a value but never used.","@typescript-eslint/no-redeclare","'Word' is already defined.","redeclared","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"100","text":"101"},"no-global-assign","no-unsafe-negation",[27,27],"()"]